# Математические операторы
# + - сложение (addition)
print("2+3 =", 2 + 3)
# - - вычитание (subtraction)
print("3-2 =", 3 - 2)
# * - умножение (multiplication)
print("3*2 = ", 3 * 2)
# / - деление (division). Всегда возвращает float (вещественное число)
a = 3 / 2
print(a, type(a))
print("10/2 =", 10 / 2, type(10 / 2))
# // - деление с округление вниз. Возвращает int, если делятся два целых числа.
# Возвращает float, который можно легко перевести в int,если хотя бы одно число вещественное.
print("10//2 = ", 10 // 2, type(10 // 2), "\n", "6.5//2 = ", 6.5 // 2, type(6.5 // 2))
# % - остаток от деления. Возвращает int, если делятся два целых числа. Возвращает float,
# который можно легко перевести в int, если хотя бы одно число вещественное.
print("10%2 = ", 10 % 2, type(10 % 2), "\n", "10.0%2 = ", 10.0 % 2, type(10.0 % 2))
# ** - Возведение в степень.
print("10**2 =", 10 ** 2, type(10 ** 2))

# Бинарные операторы (двоичные)
# ~ - инверсия. 0 переходит в 1, 1 переходит в 0
print("~", bin(7), " = ", bin(~7))
# | - логическое ИЛИ. (дизъюнкция)
print(bin(2), "|", bin(3), "=", bin(2 | 3))
# & - логическое И.
print(bin(2), "&", bin(3), "=", bin(2 & 3))
# << - побитовый сдвиг влево. Слева будут добавляться 0 (при любых числах)
# >> - побитовый сдвиг вправо. Если число положительное, то справа добавляются 0,
# иначе (при отриц. числах) будут добавлятся 1.
# ^ - исключающее ИЛИ. (XOR) 1 ^ 1 дает 0
print("0{0:b} \n{1:b} \n{2:b}".format(100, 250, 100 ^ 250))

# Логические операторы
# and - логическое И
# or - логическое ИЛИ
# not- Логическое НЕ
# in - проверка на вхождение в последовательность
# not in - проверка на невхождение в последовательность
# is - ссылаются ли переменные на одну и ту же область в памяти

# Некоторые операторы можно применять к перебираемым объектам (строки, списки)
# + - конкатенация
print("\"A\"+\"B\"=", "A" + "B")
# * - умножение (повторение)
print("\"A\"*3=", "A" * 3)
# in - проверка на вхождение
print("ll in \"Hello\"", "ll" in "Hello")
# not in - проверка на невхождение
print("ll in \"Hello\"", "ll" not in "Hello")

# Операторы присваивания
# Все математические операторы имеют "братьев"
# +=, -=, *=, /=, //=, %=, **=
a = 10
a += 10
print("a+=10 -> ", a)
# a+=10 эквивалентна записи a=a+10
# Если требуется увеличение переменной на N, то лучше использовать операторы присваивания, они работают быстрее

# Арифметико-логические операторы
# >, <, >=, <=, !=, == - больше, меньше, больше равно, меньше равно, не равно, равно

# Типы данных в Python 3
# bool - булеан, Логический тип. Имеет два значения True и False
print(type(True), bool(True), bool([]), bool(""), bool(0), bool(1))
# bool(arg). Возвращает False в таких случаях: 0, [], "", '', """""", '''''', (), {},None.
# Во всех остальных случаях возвращается True
# (краткое правило - пустота, ничего, нуль интерпретируются как False)

# int - целое число.
print(10, -10, type(10))

# float - вещественное число
print(10.0, -23.514123, -23e-4, type(-23e-4))

# str - строка. Является перебираемым типом
print("this is string", 'and this', """and this""", '''but not this (joke)''')
print(type("this is string"),
      type('and this'),
      type("""and this"""),
      type('''but not this (joke)'''))
# Строки обозначаются так: "123", '123', """123""", '''123'''
# Разницы между кавычками и апострофами нет
# Разница между тройными кавычками и апострофами есть
# """1234""" сохраняют свое форматирование

print("S"
      "T"
      "R"
      "I"
      "N"
      "G\n",

      """S
T
    R
I
N
G
      """)
# Все пробельчики отобразились(!)

# Списки - структуры данных. list()
# Т.к. Python поддерживает динамическую типизацию, то в список можно запихивать что угодно
a = [1, 23, 4, -234e-4, print, {"a": 2}, (1, 23), [1], "hai"]  # и это сработает
# Сработает даже так
a[4]("Hello list from Python")
# Или так
a[-5]("Hello reverse index")

#Создание списка
a = [] #a=list()

# Методы списка
a.append('1') #Добавление элемента в список (в конец)
a.remove(1) # Удаление конкретно указанного элемента (один раз)
a.pop() # Удаление элемента по индексу (по умолчанию будет удаляться последний элемент)
# a.clear() очистка списка
# a.sort() # Метод сортировки списка
# a.count() # Возвращает число присутствий элемента в списке [1, 1].count(1) вернет 2, потому что две единички (1)
a.extend([12,3,4]) # Вставка элементов одного списка в список a
# list.append() != list.extend()
b = [12,3,4]
print(b)
b.extend(["1234125", "4235"])
print(b)
b.append(["1234125", "4235"])
# Обратите внимание на скобочки

# Ветвление - if
# if условие:
#     pass (команды тута)
# elif условие:
#     pass (команды тута)
# else:
#     pass (команды тута)
#
# pass- команда, которая ничего не делает

# игра угадай число с одной попытки
import random  # подключаем стандартную библиотеку random

input_number = int(input("Введите число"))  # Просим пользователя ввести число
# input - возвращает str (!), поэтому строку переводим в int
secret_number = random.randint(0, 9)  # функция randint(a,b) возвращает число в отрезке [a,b] включая a и b

if secret_number > input_number:
    print("Введеное число меньше загаданного \n{0}: Загаданное число".format(secret_number))
else:
    if secret_number < input_number:
        print("Введеное число больше загаданного \n{0}: Загаданное число".format(secret_number))
    else:
        print("Вы угадали число!!!")

# Та же программа только через elif
# if secret_number > input_number:
#     print("Введеное число больше загаданного \n{0}: Загаданное число".format(secret_number))
# elif secret_number < input_number:
#     print("Введеное число меньше загаданного \n{0}: Загаданное число".format(secret_number))
# else:
#     print("Вы угадали число!!!")

# Циклы
# В программировании есть два типа циклов
# 1. С известным числом повторений
# 2. С неизвестным числом повторений
#   2.1 С постусловием
#   2.2 С предусловием
# Разница между циклами с постусловием и предусловием та,
#  что в первом случае цикл исполнится ХОТЯ БЫ ОДИН РАЗ (!)

# В Python есть циклы только с предусловием
# while <Условие>:
#   pass (код пишем сюда)

# Игра "Угадай число пока не угадаешь"

# import random #Подключаем библиотеку random (сейчас не нужно, т.к. она была подключена выше


# input - возвращает str (!), поэтому строку переводим в int
secret_number = random.randint(0, 9)  # функция randint(a,b) возвращает число в отрезке [a,b] включая a и b

while (True):  # Игровой цикл (бесконечный)
    input_number = int(input("Введите число"))  # Просим пользователя ввести число
    if secret_number > input_number:
        print("Введеное число меньше загаданного")
    else:
        if secret_number < input_number:
            print("Введеное число больше загаданного")
        else:
            print("Вы угадали число!!!")
            break

# break - оператор выхода из цикла. Применяется к ближайшему циклу

# Цикл for
# В Python цикл for отличается от привычных for'овских циклов
# for <переменные> in <перебираемый_объект>:
#   pass

for i in "Hello there":
    print(i)
for i in range(0, 10):
    print(i)
for i in [1, 23, 4, 56, 7, 8]:
    print(i)

# for проходится по всем элементам, и заранее из него можно выйти только используя break
# Такой цикл напоминает foreach (для каждого) в языках C++, Java, C#
